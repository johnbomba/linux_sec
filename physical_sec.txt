################################### threats ###################################

################################### physical access ###################################

physical access poses a threat because an attacker can press the power button 
and boot into single user mode 

# single user mode 
    allows unrestricted access

# guidelines 
    keep your system out of reach from any potential attackers
    lock server/computer rooms 
    only allow access to authorized personnel only 
    limit access to each server room individually 
    escort any visitors
    log all visits
    
############################ systems not uneder your control  ############################

# data centers are like banks of data
    possible targets for attackers 
    needs processes and controls in place to protect your data 

# data center access and controls 
    security guards /gates /checkpoints
    video survailance
    alarm system
    multifactor auth
    access policies including revoking aceess
    id badges 
    background checks on employees

# cloud
    at some point the cloud is real equipment
    physical security is still important
    your data is still on their storage system
        the provider has access to your virtual disk 
        encrypt your data   
################################### single user mode  ###################################

# single user mode
    single user mode did not traditionally require a root password
    power resets

    enter the bootloader
        press e to edit the config
    
    find the line that starts with linux
        this tells the bootloader where the kernal is 
        add the s or 1 to change the option to single user mode
        or you could use systemd.unit=<target>
            targets could be
                rescue.target 
                rescue 
    the press ctrl+x to boot 
        you now are booted into root 

# how to require a root password to boot into single user
    # older redhat & centOS
        first log in to root 
        edit /etc/sysconfig/init
            look for the line with sushell
        change sbin/sushell to sbin/sulogin 
        save changes 
        reboot            

# hot to require a root password for systemd
    # new redhat, centos, ubuntu
        log in to root 
        cd lib/systemd/system
        edit both emergency.service & rescue.service
        in both files 
        change ExecStart=-/bin/sh -c "/usr/sbin/sushell: 
        to ExecStart=-/bin/sh -c "/usr/bin/sulogin:
        save & reboot
    # ubuntu 
        the dedault setup doesnt set a root password
        so even if sulogin fires you will just login 
        you need to manually set a root pw using the passwd command 
            passwd

################################### boot loader ###################################
    
# RedHat CentOS
    interupt boot loader 
        e to edit kernal params
            change init to init-=/bin/bash
        instead of runnign the nomal init just the bash shell will be executed 
# to protect the bootloader     
    cd /etc/grub.d
        nano 40_custom
        add the following line 
            set superusers="root"
            password root root              - makes roots pw root

        to encrypt the password use the following command 
        # CentOS rel
            grub2-mkpasswd-pbkdf2
        # ubuntu
            grub-mkpasswd-pbkdf2
        enter your password and add the output of that command to the 40_custom
        
    # then rebuild the grub bootloader:
        # CentOS rel
        grub2-mkconfig -o /boot/grub2/gurb.cfg
        # ubuntu 
        update-grub
    reboot system

################################### booting from cd ###################################

rescue option 
mount the file systems
edit out the pw from the grub.cfg file 

# to avoid this encrypt your data

################################### Encrypting Data ###################################

# encrypt data to protect against physical attacks 
# the OS needs to be able to acces the data with a passphrase or keyfile
    or use the key to unlock a master key 
# the passphrase is the weak link 
 

# dm-crypt 
    dm-crypt                - device mapper crypt
        Kernal level encryption system provides transparent disk encrption 
        creates a new deive in /dev/mapper - any reads are decrypted any writes encrypted 
        use like any other block device 

# example 

Files and Dirs                          /home                   
filesystem                              EXT4                    
virtual block device                    /dev/mapper/home        
encryption/decryption                   dm-crypt                
physical block device                   /dev/sda2               

# LUKS
    Linux Unified Key Setup 
    front end for dm-crypt
    multiple passphrase support
    portable (migrate from one system to another 
    great for removable media too 

# encrypt during install 
    pro - easy to do 
    con - you give up some control 

    # CentOS & RedHat
        have a checkbox during install 
        needs to provide and confirm a passphrase 

    # ubuntu
        select encrypt system option 
        enter passphrase 

    # for either distro you will need to enter the passphrase on boot 

#################################### encrypt new device ####################################

# setting up LUKS on a new device 
    # use this process for any block device
    # doing this will remove all data on that device (partition)
    
    # you can use something like shred to fill the disk with 
        # random data before encrypting to conceal where your data is stored 
    sudo shred -v -n 1 /dev/sbd
        -v          -verbose
        -n 1        - number of iterations
        /dev/sdb    - path where new disk is located

    sudo cyryptsetup luksFormat /dev/sdb
    # will ask for passphrase
    # warns will overwrite 
    
    sudo cryptsetup luksOpen <path> opt
    # you now have a virtual block device in /dev/mapper
    sudo mkfs -t ext4 /dev/mapper/opt           - creates a filesystem 
    
    sudo vi /etc/fstab
    # create an entry in for /dev/mapper/opt /opt ext4 defaults 0 0

    sudo mount /opt
 
    # from this point on use the file system as normal allow luks and dmcrypt to handle the 
    # encryption/decryption 
    
#### in order for the device to mount during boot 
    sudo vi /etc/crypttab 
    opt /dev/sdb none luks
    |    |       |      |
    |    |       |      |
    |    |       |      +-- options column luks standard format
    |    |       +--------- passphrase (specify none so it will ask on boot)
    |    +----------------- underlying block device 
    +---------------------- name that we used for teh virtual bock 
        # you can also supply the UUID instead of the /dev/sdb 
        # you can get that info by running blkid
        # look for crypto_luks
        # this is a better idea for removable devices 
    
#### to manually run this device instead of automatically mounting: 
    sudo cryptsetup luksOpen /dev/sdb opt
        enter passphrase
    sudo mount /dev/mapper/opt /opt

    # to unmount 
    sudo unmount /opt
    sudo cryptsetup luksCLose opt

#### if you dont have block level access 
    # for example some cloud providers 
    in this case you use a file as the device you encrypt
    sudo mkdir /data
    sudo fallocate -l 100M /data/opt
    sudo strings /data/opt
    # strings should return nothing 

    # if you want to be more secure write random data to the file 
    sudo dd if=dev/urandom of=/data/opt bs=1M count=100
        dd - command
        if - input file 
        of - output file 
        bs - byte size (1 megabyte in this case 
        count - count
    # this might take some time 

    sudo cryptsetup luksFormat /data/opt   
        enter passphrase
    sudo cryptsetup luksOpen /data/opt opt
        enter passphrase
    sudo mkfs -t ext4 /dev/mapper/opt
    sudo mount /dev/mapper/opt
    
    sudo blkid 
        # will show access through /dev/loop0 which allows files to be treated like a block device 

################################## encrypt and existing device ##################################
    
you need to first back up the data on the drive 
wipe the device
set up the devie as if it was new
restore the backup 


################################## disable crtl alt del ##################################
ctrl+alt+del normally initiates a reboot


on systems with systemd:

systemctl mask ctrl-alt-del.target          - this disables the pointer to the reboot target
systemctl daemon-reload                     - this applies the changes with out needing to reboot the machine 

if you are using an older system that uses init
remove the ctrl-alt-del line from teh /etc/init
